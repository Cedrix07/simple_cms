Create rails project:
    rails new project_name -d mysql 
    bundle install 

Access Project in web
    rails server or rails s


Create controller 
    rails generate controller controller_name 


Rendering Template in controller
    def index
        render('index')
    end


Redirecting Action 
    def redirect_page
        redirect_to(:controller => 'demo', :action => 'index')
    end


Embedding ruby in an ERB Template
    <%  %> - executes ruby codes
    <%=  %> - executes and output the ruby code


Instance Variables:
    - used to give templates access to data gathered in controller
    example: @array = [1,2,3,4,5]

Links:
    format: <%= link_to(text, target) %>
    example: <%= link_to('Hello page 2', {:action => 'hello'}) %>

    URL PARAMETERS 
        <%= link_to('Hello w params ', {:action =>'hello',:page => 5, :id => 20}) %>

        debugging of params: 
        <%= params.inspect %>

Routes:
    Root Route example: root "demo#/index"


IMPORTANT MYSQL DATABASE COMMANDS
SHOW DATABASES; - show all databases
CREATE DATABASE db_name; - create database
USE db_name; - to use specific database
DROP DATABASE db_name; - delete database

Access MYSQL: 
    mysql -u root -p 

Create connection to mysql in rails: 
    rake db:schema:dump

DB MIGRATIONS:
    rails generate migration DoNothingYet
        use camelCase for naming convention

Create Model:
    rails generate model User

Creating column in migration file:
    def up
        create_table :users do |t|
            t.string "first_name", :limit => 25
            t.string "last_name", :limit => 50
            t.string "email", :default => "", :null = false
            t.string "password", :limit=>40
            
            t.timestamps 
        end
    end

db migrate:
    rake db:migrate 
    bundle exec rake db:migrate (use this if first one is not working)

reverting the migration:
    rake db:migrate VERSION=0

Check the status of all migration files:
    rake db:migrate:status

Migrate Specific migration files
    rake db:migrate VERSION=20240926055536 

Migration Advice
    comment out executed code lines to get back on track
        Write SQL commands as last resort

    Keep migrations small and concise

    All foreign key should have add_index() in the migrations

ActiveRecord
    Design pattern for relational database

ActiveRecord Examples:

    user = User.new
    user.first_name = "kevin"
    user.save > SQL INSERT 

    user.last_name = "Skoglund"
    user.save > SQL UPDATE 

    user.delete > SQL DELETE 

ActiveRelation or ARel 
    Simplifies the generation of complex database queries
    Small queries are chainable 
    Complex joins and aggregations use efficient SQL 


Ways to configure different table db_name

1. inside model: 
    self.table_name = "admin_users"

2. Rename the Model name class and the file of model 
    example: admin_user | naming convention should be singular and have underscore. 

Rails console 
    rails c or rails console 

    create records 
        subject = Subject.create(:name => "Second Subject", :position => 2)
    
    update records  
        First Method
            subject = Subject.find(1)
            subject.name = "Initial Subject" 
            subject.save

        Second Method
            subject = Subject.find(2)
            subject.update_attribute(:name => "Next Subject", :visible => true)

    Delete records
        subject = Subject.find(3)
        subject.destroy
    
    Finding records 
        primary key finder > return error if it can't find the record 
            Subject.find(2)
        
        Dynamic finder > return nil if it can't find the record 
            Subject.find_by_id(2)
            Subject.find_by_name("record name")
        
        Find all record
            Subject.all
        
        Find first or last
            Subject.first 
            Subject.last

    Query Methods Conditions
        where  >   returns an ActiveRelation object 
            Subject.where(:visible => true)
        where with chain 
            Subject.where(:visible => true ).order("Position ASC")

        array expression type: 
            Subject.where(["visible = ?", true])

        hash expression types:
           Subject.where(:visible => true)
    
    Order Methods: 
        order (sql_fragment)
            table_name.column_name ASC/DESC 

        limit (integer) 


        offset (integer)


    example when chained together
        Subject.order("position ASC").limit(20).offset(40)

Named Scopes
    Defined & be called ActiveRelation Methods using ActiveRelation query Methods
    Can Accept parameters and requires lambda syntax
    
    Example
        scope :active, lambda {where(:active => true)}

    Example w/ parameters   
        scope :with_content_type, lambda {|ctype|
            where(:content_type => ctype)
        }

    Example with chaining Scopes
        Article.recent.visible.newest_first

Relationship types
    
    One-to-One 
        Classroom has_one :teacher 
        Teacher belongs_to :classroom 

    One-to-Many 
        More commonly used 
        Plural relationships names
            Teacher has_many :courses
            Course belongs_to :teacher 

    Many-to-Many
        Course has_and_belongs_to_many :students
        Students has_and_belongs_to_many :courses 
    
 Class with "belongs_to" should have the foreign key 
   
has_many Methods
    subject.pages 
    subject.pages << page 
    subject.pages = [page, page, page]

    #remove page in the array 
    subject.pages.delete(page)

    #delete from the database 
    subject.pages.destroy(page)

    #remove all pages
    subject.pages.clear 

    #check if empty
    subject.pages.empty?

Many-to-Many Association: simple 
    used when an object has many objects which belong to it but not exclusively

    requires a join table 
        2 foreign keys index both keys together
        No primary key column (:id => false )
    
    Join table naming
        first_table + _ + second_table 
        both table names are plural 
        Alphabetical order 
        Default name, can be configured 

Many-to-Many Association:Rich
    still uses a join table, with two indexed FK
    requires a PK column 
    Join table has its own model 
    No table name convention to follow 
    Names ending in "-ments" or "-ships" work well 


FORM BASICS

form_for example:
 <%= form_for(:subject, :url => {:action => 'create'}) do |f| %>
    <table summary="Subject form fields">
        <tr>
            <th>Name</th>
            <td><%= f.text_field(:name)%></td>
        </tr>
        <tr>
            <th>Position</th>
            <td><%= f.text_field(:position) %></td>
        </tr>
        <tr>
            <th>Visible</th>
            <td><%= f.text_field(:visible) %></td>
        </tr>
    </table>
    <div class="form-buttons">
        <%= submit_tag("Create Subject") %>
    </div>
<% end %>

MASS Assignment
    passing a hash of values to an object to be assigned as attributes

Strong parameters
    params.permit(:first_name, :last_name)
    params.require(:subject)

FLASH HASH
    Stores a message in session data
    Clear old messages after every request
    Use for messages needed after a redirect
    
    flash[:notice] = "The subject was created successfully!"
    flash[:error] = "You don't have enough access privileges"
    


FORM_WITH EXAMPLE 

Create 
    <%= form_for(:section, :url => {:action => 'create'}) do |f| %>
        <table summary="Sections form fields">
             <tr>
                <th>Page ID</th>
                <td><%= f.text_field(:page_id)%></td>
            </tr>
            <tr>
                <th>Name</th>
                <td><%= f.text_field(:name)%></td>
            </tr>
            <tr>
                <th>Position</th>
                <td><%= f.text_field(:position) %></td>
            </tr>
            <tr>
                <th>Visible</th>
                <td><%= f.text_field(:visible) %></td>
            </tr>
            <tr>
                <th>Content Type</th>
                <td><%= f.text_field(:content_type) %></td>
            </tr>
            <tr>
                <th>Content</th>
                <td><%= f.text_field(:content) %></td>
            </tr>
        </table>
        <div class="form-buttons">
            <%= submit_tag("Create Section") %>
        </div>
    <% end %>

    <td>
        <%= link_to("Show", {:action => 'show', :id => section.id}, :class => 'action show') %>

        <%= link_to("Edit", {:action => 'edit', :id => section.id}, :class => 'action edit') %>

        <%= link_to("Delete", section, method: :delete, data: { confirm: "Are you sure?" }, :class => 'action delete') %>
    </td>

Edit
   <%= form_with model:@section, local: true do |f| %>
        <table summary="Subject form fields">
           <tr>
                <th>Page ID</th>
                <td><%= f.text_field :page_id %></td>
            </tr>
            <tr>
                <th>Name</th>
                <td><%= f.text_field :name %></td>
            </tr>
            <tr>
                <th>Position</th>
                <td><%= f.text_field :position %></td>
            </tr>
            <tr>
                <th>Visible</th>
                <td><%= f.text_field :visible %></td>
            </tr>
            <tr>
                <th>Content Type</th>
                <td><%= f.text_field :content_type %></td>
            </tr>
            <tr>
                <th>Content</th>
                <td><%= f.text_area :content %></td>
            </tr>
        </table>
        <div class="form-buttons">
            <%= submit_tag("Update Subject") %>
        </div>
    <% end %>


DELETE 
 <%= form_with model: @section, url: section_path(@section), method: :delete, local: true do |f| %>
    <p>Are you sure you want to delete <strong><%= @section.name %></strong>?</p>

    <div class="form-buttons">
      <%= f.submit "Delete Section" %>
    </div>
  <% end %>

HELPERS
    used to avoid repeating of code for text, number, datetime helpers, and etc.

TEXT HELPERS
    word_wrap
        <%= word_wrap(text, :line_width => 10) %>
        <%= number_to_currency(500, :precision => 0, :unit => "php", :format => "%n %u")%>
    simple_formats
    truncate
        <%= truncate(text, :length => 10, :omission => "...")%>
        <%= trucate(text, length: 10, omission: "...") %> 
    excerpt

    highlight 
    pluralize
    cycle

NUMBER HELPERS
    number_to_currency
        <%= number_to_currency(500)%>
    number_to_percentage 

    number_with_precision / number_with_rounded
    number_to_human
    number_to_human_size
    number_to_phone

DATE & TIME HELPERS
    Time.now or 30.days.from_now
    30.minutes

Relative DateTime Calculations 

Readable DATETIME format
Time.now.strftime("%B %d, %Y %H:%M")

CUSTOM HELPERS 
    Ruby modules 
    created when generating a controller 
    available to view templates
    put custom helper to application_helper file if you want it to use with different controllers. 

SANITIZE HELPERS    
    use to sanitize any inputs from the user
    helps to prevent XSS or messed up layout style. 

    key methods:
    html_escape(), h()
    raw()
    html_safe
    html_safe?
    strip_links() - remove html links from text
    strip_tags()

ASSET PIPELINE
    helps manage css, js, and images
    enabled by default
    concatenates css and js
    compress / minifies css and js

Rails stylesheet link tag 
<%= stylesheet_link_tag('application') %>

Rails JS Helper tags
   <%= javascript_include_tag('application')%>
   
   <%= javascript_tag("alert("hello!")")%>

   <%= javascript_tag do %>
    alert("Hello!");
   <% end %>

IMAGES
    LOCATION
        with asset pipeline: /app/assets/images
        w/ asset pipeline: /public/images
        user-uploaded img: /public/images

    RAILS IMAGE HELPER
        <%= image_tag('logo.png') %>
           <%= image_tag('logo.png', :size => 95, :alt => 'logo') %>

PREVENT CSRF
    require user authentication
    regularly log out inactive users
    GET request should be read only  
    POST Request should be only respond to POSTS request
    

RAILS C for testing validation of fields
    s = Subject.new
    s.errors? # see all error messages
    s.valid? # return true or false if the creation is valid
    s.errors.full_message # to see the full error messages

CUSTOM VALIDATION 
    validate: custom_method
    def custom_method
    end
    exampe:
     
    validate :user_name_is_allowed

    def user_name_is_allowed
        if FORBIDDEN_USERNAMES.include?(username)
        errors.add(:username, "has been restricted from use")
        end
    end